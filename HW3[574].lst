Microsoft (R) Macro Assembler Version 6.15.8803		    12/11/16 22:51:17
Program Template     (template.asm)			     Page 1 - 1




				 ;Mahmut Çotak-150714010 -HW3


				TITLE Program Template     (template.asm)


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C .NOLIST
			      C .LIST
			      C 


 00000000			.data
 00000000 000000C8		money dword 200,100,50,20,10,5,1                              ;we definen a array to money
	   00000064
	   00000032
	   00000014
	   0000000A
	   00000005
	   00000001
 0000001C 45 6E 74 65 72	str1 byte "Enter the money for total :  " , 0                 ;define str1 in byte to want user input money
	   20 74 68 65 20
	   6D 6F 6E 65 79
	   20 66 6F 72 20
	   74 6F 74 61 6C
	   20 3A 20 20 00
 0000003A 59 6F 75 20 69	str2 byte "You input wrong number : ",0                       ;we define str2
	   6E 70 75 74 20
	   77 72 6F 6E 67
	   20 6E 75 6D 62
	   65 72 20 3A 20
	   00
 00000054 59 6F 75 20 69	str4 byte "You input all money's number succesfully : ",0                       ;we define str2
	   6E 70 75 74 20
	   61 6C 6C 20 6D
	   6F 6E 65 79 27
	   73 20 6E 75 6D
	   62 65 72 20 73
	   75 63 63 65 73
	   66 75 6C 6C 79
	   20 3A 20 00
 00000080 54 68 65 20 74	str3 byte "The total of your money : ",0                       ;we define str3
	   6F 74 61 6C 20
	   6F 66 20 79 6F
	   75 72 20 6D 6F
	   6E 65 79 20 3A
	   20 00
 0000009B  00000007 [		countinput dword  7 dup(0)                                    ;we initilaze array with 7 zero  count
	    00000000
	   ]
 000000B7 00000000		count dword 0                                                 ;we initilaze count wth zero
 000000BB 00000000		sum  dword  0                                                 ;we initiaze sum with zero
 00000000			.code
 00000000			main PROC


 00000000  E8 00000000 E	call clrscr                                                 ;this clear screen firstly

 00000005  E8 00000000 E	call clrscr
 0000000A  BA 0000001C R	                  mov edx ,offset str1                      ;point the str1 in edx 
 0000000F  E8 00000000 E	                  call writestring                          ;write the str3 on screen to want user enter a number

 00000014  E8 00000000 E	call crlf                                                    ;take a space
 00000019  E8 00000000 E	call crlf                                                    ;take a space


 0000001E  B9 00000007		                          mov ecx ,lengthof money            ;define the length of string in ecx register
 00000023  BB 00000000		                          mov ebx ,0                         ;initilaze ebx register with zero

 00000028  C7 05 000000B7 R	                          mov count,0                        ;initilaze count with zero
	   00000000
 00000032			start:                                                         ;start to loop 
				          
				               
 00000032			inputanothernumber:                                          ;input another number if input wrong number before 

 00000032  E8 00000000 E	                    call crlf                                ;take space
 00000037  8B 83 00000000 R	                        mov eax,money[ebx]                   ;move the  elementh of money in eax register 
 0000003D  E8 00000000 E	                        call writedec                         ;write the  decimal number o screen
 00000042  B0 78		                        mov al ,'x'                           ;we move a char in  al register
 00000044  E8 00000000 E	                        call writechar                       ;we call char to wrire on screen
 00000049  E8 00000000 E	                    call readint                               ;this want user to input a number
 0000004E  83 F8 00		                    cmp eax,0                                  ;compare the eax with zero
 00000051  7C 2B		                    jl wronginput                               ;if eax less than zero  jump to wrong input 

 00000053  89 83 0000009B R	                    mov countinput[ebx],eax                    ;ij  eax greater than zero  mov  number in countinput array
				      

 00000059  8B 83 00000000 R	                    mov eax,money[ebx]                         ;move money element in  ea register 
 0000005F  F7 A3 0000009B R	                    mul countinput[ebx]                        ;multible countinput elementh withmoney elementh
 00000065  01 05 000000BB R	                    add sum,eax                                ;add result  sum
				      
 0000006B  E8 00000000 E	                    call crlf                                   ;take space
 00000070  83 C3 04		                    add ebx,4                                   ;add ebx register 4 to next elementh
 00000073  83 05 000000B7 R	                    add count,1                                 ;increment the count 
	   01

 0000007A  E2 B6		                                loop start                        ;loop to start and keepon
 0000007C  EB 7D		                                     jmp trueresult               ;jump to trueresult if result true 
				 








 0000007E			 wronginput:                                                      ;jump to here if input wrong
 0000007E  E8 00000000 E	                                        call clrscr                     ;clear the screen
 00000083  BA 0000001C R	                                        mov edx ,offset str1              ;point the str1 in edx
 00000088  E8 00000000 E	                                        call writestring                   ;write str1 on screen
 0000008D  E8 00000000 E	                                        call crlf                           ;take space
 00000092  BA 0000003A R	                                        mov edx ,offset str2                 ;point to str2 in edx
 00000097  E8 00000000 E	                                        call writestring                    ;write str2 on screen 
 0000009C  E8 00000000 E	                                        call crlf                          
				                                    
 000000A1  BB 00000000		                    mov ebx,0                                            ;initilaze ebx register with zero
 000000A6  8B 1D 000000B7 R	                    mov ebx,count                                         ;move immediate value in ebx register                                   
 000000AC  83 FB 00		                    cmp ebx,0                                             ;compare the ebx with zero
 000000AF  74 02		                            je  increment                                 ;if ebx equal zero than jump increment
 000000B1  EB 05		                    jmp jump2                                              ;if count not equal zero than jump jump2                                      
 000000B3			 increment  :                                                   ;increment start here
 000000B3  E9 FFFFFF7A		                    jmp inputanothernumber                        ;jump if user input first value wrong                    
 000000B8			jump2:                                                          ;jump2  start here 
 000000B8  51			             push ecx                                           ;push ecx to take later
 000000B9  8B 0D 000000B7 R	             mov ecx,count                                        ;move count in ecx register to loop
 000000BF  BB 00000000		             mov ebx,0                                            ;initilaze ebx with zero







				             
 000000C4			start2:                                                       ;start2 start here to loop
				                    
 000000C4  E8 00000000 E	             call crlf  
 000000C9  8B 83 00000000 R	             mov eax,money[ebx]                                   ;move money elementh in eax register
 000000CF  E8 00000000 E	             call writedec                                        ;write decimal  number on screen
 000000D4  B0 78		             mov al ,'x'                                        ;move x char in al register
 000000D6  E8 00000000 E	             call writechar                                          ;write char on screen
 000000DB  8B 83 0000009B R	             mov eax,countinput[ebx]                                        ;move money elementh in eax register
 000000E1  E8 00000000 E	             call writedec                                        ;write decimal  number on screen
 000000E6  E8 00000000 E	                     call crlf
 000000EB  E8 00000000 E	                     call crlf   
 000000F0  83 C3 04		              add ebx,4                                       ;add 4 to ebx register to next elementh of imediates values 
 000000F3  E2 CF		                       loop start2                               ;loop turn the start2                        
 000000F5  59			                     pop ecx                                   ;take the value of ecx again 
				                     
				                     
 000000F6  E9 FFFFFF37		                          jmp inputanothernumber 




				  
 000000FB  E8 00000000 E	trueresult:                  call crlf
 00000100  BA 00000054 R	                           mov edx,offset str4                ;point the str4 edx
 00000105  E8 00000000 E	                           call writestring                       ;display string on screen 
 0000010A  E8 00000000 E	                             call crlf
				                           
 0000010F  BA 00000080 R	                           mov edx,offset str3                ;point the str3 edx
 00000114  E8 00000000 E	                           call writestring                       ;display string on screen 
 00000119  A1 000000BB R	                           mov eax,sum                             ;mov sum in ax register
 0000011E  E8 00000000 E	                           call writeint                           ;display sum on screen 
 00000123  E8 00000000 E	                           call crlf




					exit	
 0000012F			main ENDP



				END main
Microsoft (R) Macro Assembler Version 6.15.8803		    12/11/16 22:51:17
Program Template     (template.asm)			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000005
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 Byte
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000BF DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000012F DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ClrScr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000012F Public STDCALL
  start  . . . . . . . . . . . .	L Near	 00000032 _TEXT	
  inputanothernumber . . . . . .	L Near	 00000032 _TEXT	
  wronginput . . . . . . . . . .	L Near	 0000007E _TEXT	
  increment  . . . . . . . . . .	L Near	 000000B3 _TEXT	
  jump2  . . . . . . . . . . . .	L Near	 000000B8 _TEXT	
  start2 . . . . . . . . . . . .	L Near	 000000C4 _TEXT	
  trueresult . . . . . . . . . .	L Near	 000000FB _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
countinput . . . . . . . . . . .	DWord	 0000009B _DATA	
count  . . . . . . . . . . . . .	DWord	 000000B7 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
money  . . . . . . . . . . . . .	DWord	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
str1 . . . . . . . . . . . . . .	Byte	 0000001C _DATA	
str2 . . . . . . . . . . . . . .	Byte	 0000003A _DATA	
str3 . . . . . . . . . . . . . .	Byte	 00000080 _DATA	
str4 . . . . . . . . . . . . . .	Byte	 00000054 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 000000BB _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
